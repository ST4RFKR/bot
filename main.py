# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import asyncio
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackContext, CallbackQueryHandler, MessageHandler, filters
from datetime import datetime, timedelta
import pytz

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ú–∞—Å—Å–∏–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π
schedule_data = [
    {'date': '10.09.2024', 'time': '18:00', 'title': "–ó–∞–Ω—è—Ç–∏–µ –ø–æ JS - –°–ø—Ä–∏–Ω—Ç 1 –ó–∞–Ω—è—Ç–∏–µ 1"},
    {'date': '17.09.2024', 'time': '18:00', 'title': "–ó–∞–Ω—è—Ç–∏–µ –ø–æ JS - –°–ø—Ä–∏–Ω—Ç 1 –ó–∞–Ω—è—Ç–∏–µ 2"},
    {'date': '24.09.2024', 'time': '01:00', 'title': "–ó–∞–Ω—è—Ç–∏–µ –ø–æ JS - –°–ø—Ä–∏–Ω—Ç 1 –ó–∞–Ω—è—Ç–∏–µ 3"},
    {'date': '24.09.2024', 'time': '18:00', 'title': "–ó–∞–Ω—è—Ç–∏–µ –ø–æ JS - –°–ø—Ä–∏–Ω—Ç 1 –ó–∞–Ω—è—Ç–∏–µ 3"},
    {'date': '01.10.2024', 'time': '18:00', 'title': "–ó–∞–Ω—è—Ç–∏–µ –ø–æ JS - –°–ø—Ä–∏–Ω—Ç 1 –ó–∞–Ω—è—Ç–∏–µ 4"},
    {'date': '09.09.2024', 'time': '18:00', 'title': "–ó–∞–Ω—è—Ç–∏–µ –ø–æ React - –°–ø—Ä–∏–Ω—Ç 1 –ó–∞–Ω—è—Ç–∏–µ 1"},
    {'date': '16.09.2024', 'time': '18:00', 'title': "–ó–∞–Ω—è—Ç–∏–µ –ø–æ React - –°–ø—Ä–∏–Ω—Ç 1 –ó–∞–Ω—è—Ç–∏–µ 2"},
    {'date': '23.09.2024', 'time': '18:00', 'title': "–ó–∞–Ω—è—Ç–∏–µ –ø–æ React - –°–ø—Ä–∏–Ω—Ç 1 –ó–∞–Ω—è—Ç–∏–µ 3"},
    {'date': '30.09.2024', 'time': '18:00', 'title': "–ó–∞–Ω—è—Ç–∏–µ –ø–æ React - –°–ø—Ä–∏–Ω—Ç 1 –ó–∞–Ω—è—Ç–∏–µ 4"},
]

# –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å
tz = pytz.timezone('Europe/Moscow')

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
async def schedule_command(update: Update, context: CallbackContext):
    await show_schedule(update)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è
ADMIN_USER_IDS = [697761704]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

async def add_command(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if user_id not in ADMIN_USER_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π.")
        return

    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω—è—Ç–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):")
    context.user_data['adding'] = True
    context.user_data['step'] = 'date'  # –î–æ–±–∞–≤–ª—è–µ–º —à–∞–≥
    context.user_data['current_event'] = {}

async def handle_message(update: Update, context: CallbackContext):
    if 'adding' in context.user_data and context.user_data['adding']:
        step = context.user_data['step']
        if step == 'date':
            context.user_data['current_event']['date'] = update.message.text
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú):")
            context.user_data['step'] = 'time'
        elif step == 'time':
            context.user_data['current_event']['time'] = update.message.text
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è:")
            context.user_data['step'] = 'title'
        elif step == 'title':
            context.user_data['current_event']['title'] = update.message.text
            new_event = context.user_data['current_event']
            schedule_data.append(new_event)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            await update.message.reply_text(f"–ó–∞–Ω—è—Ç–∏–µ '{new_event['title']}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {new_event['date']} –≤ {new_event['time']}.")
            context.user_data.clear()  # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
async def show_schedule(update: Update):
    now = datetime.now(tz)  # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
    sorted_schedule = sorted(
        [event for event in schedule_data if datetime.strptime(f"{event['date']} {event['time']}", '%d.%m.%Y %H:%M').astimezone(tz) > now],
        key=lambda x: datetime.strptime(f"{x['date']} {x['time']}", '%d.%m.%Y %H:%M').astimezone(tz)
    )

    if sorted_schedule:
        message = "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–Ω—è—Ç–∏–π –Ω–∞ –º–µ—Å—è—Ü:\n\n"
        for event in sorted_schedule:
            if "JS" in event['title']:
                message += (
                    f"üåü **–ó–∞–Ω—è—Ç–∏–µ –ø–æ JavaScript!** üöÄ\n"
                    f"üóìÔ∏è –î–∞—Ç–∞: {event['date']}\n"
                    f"‚è∞ –í—Ä–µ–º—è: {event['time']}\n"
                    f"üìö –ì–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–º—É –ø–æ–≥—Ä—É–∂–µ–Ω–∏—é –≤ –º–∏—Ä JS! üíª‚ú®\n\n"
                )
            elif "React" in event['title']:
                message += (
                    f"‚öõÔ∏è **–ó–∞–Ω—è—Ç–∏–µ –ø–æ React!** üåê\n"
                    f"üóìÔ∏è –î–∞—Ç–∞: {event['date']}\n"
                    f"‚è∞ –í—Ä–µ–º—è: {event['time']}\n"
                    f"üåü –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –≤–º–µ—Å—Ç–µ! üéâüíª\n\n"
                )
            else:
                message += f"üóìÔ∏è {event['date']} ‚è∞ {event['time']} - {event['title']}\n\n"
    else:
        message = "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–Ω—è—Ç–∏–π –±–æ–ª—å—à–µ –Ω–µ—Ç."

    await update.message.reply_text(message)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥
async def help_command(update: Update, context: CallbackContext):
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∏–∂–µ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /schedule\n"
        "/next - –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ\n"
        "/schedule - –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –Ω–∞ –º–µ—Å—è—Ü\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ\n"
        "/add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!)\n"
    )
    await update.message.reply_text(help_text)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
tz_moscow = pytz.timezone('Europe/Moscow')

async def notify_about_event(application, chat_id, event):
    try:
        logger.info(f"Sending notification for event: {event['title']} to chat_id: {chat_id}")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        event_datetime = datetime.strptime(f"{event['date']} {event['time']}", '%d.%m.%Y %H:%M')
        event_datetime_moscow = tz_moscow.localize(event_datetime)

        if "JS" in event['title']:
            message = (
                f"üí° –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç –Ω–∞—á–Ω—ë—Ç—Å—è:\n"
                f"üåü **–ó–∞–Ω—è—Ç–∏–µ –ø–æ JavaScript!** üöÄ\n"
                f"üóìÔ∏è –î–∞—Ç–∞: {event_datetime_moscow.strftime('%d.%m.%Y')}\n"
                f"‚è∞ –í—Ä–µ–º—è: {event_datetime_moscow.strftime('%H:%M')}\n"
                f"üìö –ì–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–º—É –ø–æ–≥—Ä—É–∂–µ–Ω–∏—é –≤ –º–∏—Ä JS! üíª‚ú®"
            )
        elif "React" in event['title']:
            message = (
                f"üí° –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç –Ω–∞—á–Ω—ë—Ç—Å—è:\n"
                f"‚öõÔ∏è **–ó–∞–Ω—è—Ç–∏–µ –ø–æ React!** üåê\n"
                f"üóìÔ∏è –î–∞—Ç–∞: {event_datetime_moscow.strftime('%d.%m.%Y')}\n"
                f"‚è∞ –í—Ä–µ–º—è: {event_datetime_moscow.strftime('%H:%M')}\n"
                f"üåü –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –≤–º–µ—Å—Ç–µ! üéâüíª"
            )
        else:
            message = (
                f"üí° –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç –Ω–∞—á–Ω—ë—Ç—Å—è '{event['title']}' –≤ "
                f"{event_datetime_moscow.strftime('%H:%M')}!"
            )
        
        await application.bot.send_message(chat_id=chat_id, text=message)
    except Exception as e:
        logger.error(f"Failed to send notification: {e}")

async def check_schedule(context: CallbackContext):
    application = context.application
    chat_id = context.job.chat_id
    now = datetime.now(tz_moscow)  # –¢–µ–∫—É—â–µ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
    logger.info(f"Checking schedule at {now}")

    for event in schedule_data:
        event_datetime = datetime.strptime(f"{event['date']} {event['time']}", '%d.%m.%Y %H:%M')
        event_datetime_moscow = tz_moscow.localize(event_datetime)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–æ—Å–∫–æ–≤—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        logger.info(f"Event '{event['title']}' datetime: {event_datetime_moscow}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –¥–æ –Ω–∞—á–∞–ª–∞ —Å–æ–±—ã—Ç–∏—è –æ—Å—Ç–∞–ª–æ—Å—å 30 –º–∏–Ω—É—Ç –∏–ª–∏ –º–µ–Ω—å—à–µ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        if not event.get('notified') and now + timedelta(minutes=30) >= event_datetime_moscow > now:
            logger.info(f"Sending notification for event '{event['title']}'")
            await notify_about_event(application, chat_id, event)
            event['notified'] = True  # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        elif event_datetime_moscow <= now:
            event['notified'] = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ—à–µ–¥—à–∏—Ö —Å–æ–±—ã—Ç–∏–π 
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–Ω—è—Ç–∏—è
async def next_event_command(update: Update, context: CallbackContext):
    now = datetime.now(tz)  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /next –ø–æ–ª—É—á–µ–Ω–∞.")
    
    upcoming_events = [
        event for event in schedule_data
        if datetime.strptime(f"{event['date']} {event['time']}", '%d.%m.%Y %H:%M').astimezone(tz) > now
    ]
    
    logger.info(f"–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–Ω—è—Ç–∏—è: {upcoming_events}")

    if upcoming_events:
        next_event = min(
            upcoming_events,
            key=lambda x: datetime.strptime(f"{x['date']} {x['time']}", '%d.%m.%Y %H:%M').astimezone(tz)
        )
        
        if "JS" in next_event['title']:
            message = (
                f"üåü **–°–ª–µ–¥—É—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ –ø–æ JavaScript!** üöÄ\n"
                f"üóìÔ∏è –î–∞—Ç–∞: {next_event['date']}\n"
                f"‚è∞ –í—Ä–µ–º—è: {next_event['time']}\n"
                f"üìö –ì–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–º—É –ø–æ–≥—Ä—É–∂–µ–Ω–∏—é –≤ –º–∏—Ä JS! üíª‚ú®"
            )
        elif "React" in next_event['title']:
            message = (
                f"‚öõÔ∏è **–°–ª–µ–¥—É—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ –ø–æ React!** üåê\n"
                f"üóìÔ∏è –î–∞—Ç–∞: {next_event['date']}\n"
                f"‚è∞ –í—Ä–µ–º—è: {next_event['time']}\n"
                f"üåü –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –≤–º–µ—Å—Ç–µ! üéâüíª"
            )
        else:
            message = f"–°–ª–µ–¥—É—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ: '{next_event['title']}' –Ω–∞ {next_event['date']} –≤ {next_event['time']}."
        
        await update.message.reply_text(message)
    else:
        await update.message.reply_text("–ó–∞–Ω—è—Ç–∏–π –±–æ–ª—å—à–µ –Ω–µ—Ç.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
async def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    await show_schedule(query)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏
async def start(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data='show_schedule')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.', reply_markup=reply_markup)

from telegram.ext import ChatMemberHandler

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def greet_new_user(update: Update, context: CallbackContext):
    new_members = update.message.new_chat_members  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for member in new_members:
        if not member.is_bot:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –±–æ—Ç
            first_name = member.first_name  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            username = member.username if member.username else first_name  # –ü–æ–ª—É—á–∞–µ–º username, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            greeting_message = (
                f"üëã –ü—Ä–∏–≤–µ—Ç, {first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –≥—Ä—É–ø–ø—É! üéâ\n"
                "–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ `/start - –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, /next - –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π —É—Ä–æ–∫`"
                "–ï—Å–ª–∏ —Ç–µ–±–µ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã! üíª‚ú®"
            )
            await update.message.reply_text(greeting_message)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
if __name__ == '__main__':
    ...






if __name__ == '__main__':
    TOKEN = '7728288925:AAGF00CJj_u7hD5vn2Qh7hWXpT-iPtJvWxY'
    GROUP_CHAT_ID = -1002238351805  # –ó–∞–º–µ–Ω–∏ –Ω–∞ ID —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã

    # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
    app = ApplicationBuilder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("schedule", schedule_command))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("add", add_command))
    app.add_handler(CommandHandler("next", next_event_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))  # –û–¥–∏–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —à–∞–≥–æ–≤
    app.add_handler(CallbackQueryHandler(button_handler, pattern='show_schedule'))
    app.add_handler(ChatMemberHandler(greet_new_user, ChatMemberHandler.CHAT_MEMBER))

    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ JobQueue –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    job_queue = app.job_queue
    job_queue.run_repeating(check_schedule, interval=60, first=10, chat_id=GROUP_CHAT_ID)

    logger.info("Bot started")
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    app.run_polling()
